'''
This program was made by Trevor Roddy, 
Broken by Connor Morley with the addition of Twitter API
Fixed by Trevor Roddy
occasional help from Mike Beradino
All done at the POHS in Houston
'''

from driver import apa102
import time
from urllib.request import urlopen
from bs4 import BeautifulSoup
fromTxt=""
# Imports library that allows only first Tweet to be taken
import sys
import re
#import fileinput
strip = apa102.APA102(num_led=256,order='rgb')


def split(word):    #this is a method which returns an array of all characters in a string
    return[
        char for char in word #return individual words in larger string (such as fromT1t)
    ]

def toBinary(char):
    if char == 'a':
        return a
    elif char == 'b':
        return b
    elif char == 'c':
        return c
    elif char == 'd':
        return d
    elif char == 'e':
        return e
    elif char == 'f':
        return f
    elif char == 'g':
        return g
    elif char == 'h':
        return h
    elif char == 'i':
        return i
    elif char == 'j':
        return j
    elif char == 'k':
        return k
    elif char == 'l':
        return l
    elif char == 'm':
        return m
    elif char == 'n':
        return n
    elif char == 'o':
        return o
    elif char == 'p':
        return p
    elif char == 'q':
        return q
    elif char == 'r':
        return r
    elif char == 's':
        return s
    elif char == 't':
        return t
    elif char == 'u':
        return u
    elif char == 'v':
        return v
    elif char == 'w':
        return w
    elif char == 'x':
        return x
    elif char == 'y':
        return y
    elif char == 'z':
        return z
    elif char == 'A':
        return A
    elif char == 'B':
        return B
    elif char == 'C':
        return C
    elif char == 'D':
        return D
    elif char == 'E':
        return E
    elif char == 'F':
        return F
    elif char == 'G':
        return G
    elif char == 'H':
        return H
    elif char == 'I':
        return I
    elif char == 'J':
        return J
    elif char == 'K':
        return K
    elif char == 'L':
        return L
    elif char == 'M':
        return M
    elif char == 'N':
        return N
    elif char == 'O':
        return O
    elif char == 'P':
        return P
    elif char == 'Q':
        return Q
    elif char == 'R':
        return R
    elif char == 'S':
        return S
    elif char == 'T':
        return T
    elif char == 'U':
        return U
    elif char == 'V':
        return V
    elif char == 'W':
        return W
    elif char == 'X':
        return X
    elif char == 'Y':
        return Y
    elif char == 'Z':
        return Z
    elif char == '1':
        return one
    elif char == '2':
        return two
    elif char == '3':
        return three
    elif char == '4':
        return four
    elif char == '5':
        return five
    elif char == '6':
        return six
    elif char =='7':
        return seven
    elif char == '8':
        return eight
    elif char == '9':
        return nine
    elif char == '0':
        return zero
    elif char ==',':
        return comma
    elif char == '-':
        return hyphen
    elif char == '.':
        return period
    elif char == '/':
        return slash
    elif char == ':':
        return colon
    elif char == ';':
        return semicolon
    elif char == '<':
        return less
    elif char == '>':
        return greater
    elif char == '=':
        return equal
    elif char == '?':
        return question
    elif char =='[':
        return bracketleft
    elif char == '\\':
        return backslash
    elif char == ']':
        return bracketright
    elif char == '^':   
        return asciicircum
    elif char == '_':
        return underscore
    elif char == '\u0027':
        return grave
    elif char == ' ':
        return space
    else:
        return space

comma = "0000000000000000000000000000000000000000001100000011000001100000"
hyphen = "0000000000000000000000001111110000000000000000000000000000000000"
period = "0000000000000000000000000000000000000000001100000011000000000000"
slash= "0000011000001100000110000011000001100000110000001000000000000000"
zero = "0111110011000110110011101101111011110110111001100111110000000000"
one = "0011000001110000001100000011000000110000001100001111110000000000"
two= "0111100011001100000011000011100001100000110001001111110000000000"
three= "0111100011001100000011000011100000001100110011000111100000000000"
four= "0001110000111100011011001100110011111110000011000001111000000000"
five= "1111110011000000111110000000110000001100110011000111100000000000"
six= "0011100001100000110000001111100011001100110011000111100000000000"
seven= "1111110011001100000011000001100000110000001100000011000000000000"
eight= "0111100011001100110011000111100011001100110011000111100000000000"
nine= "0111100011001100110011000111110000001100000110000111000000000000"
colon= "0000000000110000001100000000000000000000001100000011000000000000"
semicolon= "0000000000110000001100000000000000110000001100000110000000000000"
less= "0001100000110000011000001100000001100000001100000001100000000000"
equal= "0000000000000000111111000000000000000000111111000000000000000000"
greater= "0110000000110000000110000000110000011000001100000110000000000000"
question= "0111100011001100000011000001100000110000000000000011000000000000"
at= "0111110011000110110111101101111011011110110000000111100000000000"
A= "0011000001111000110011001100110011111100110011001100110000000000"
B= "1111110001100110011001100111110001100110011001101111110000000000"
C= "0011110001100110110000001100000011000000011001100011110000000000"
D= "1111100001101100011001100110011001100110011011001111100000000000"
E= "1111111001100010011010000111100001101000011000101111111000000000"
F= "1111111001100010011010000111100001101000011000001111000000000000"
G= "0011110001100110110000001100000011001110011001100011111000000000"
H= "1100110011001100110011001111110011001100110011001100110000000000"
I= "0111100000110000001100000011000000110000001100000111100000000000"
J= "0001111000001100000011000000110011001100110011000111100000000000"
K= "1110011001100110011011000111100001101100011001101110011000000000"
L= "1111000001100000011000000110000001100010011001101111111000000000"
M= "1100011011101110111111101111111011010110110001101100011000000000"
N= "1100011011100110111101101101111011001110110001101100011000000000"
O= "0011100001101100110001101100011011000110011011000011100000000000"
P= "1111110001100110011001100111110001100000011000001111000000000000"
Q= "0111100011001100110011001100110011011100011110000001110000000000"
R= "1111110001100110011001100111110001101100011001101110011000000000"
S= "0111100011001100111000000111000000011100110011000111100000000000"
T= "1111110010110100001100000011000000110000001100000111100000000000"
U= "1100110011001100110011001100110011001100110011001111110000000000"
V= "1100110011001100110011001100110011001100011110000011000000000000"
W= "1100011011000110110001101101011011111110111011101100011000000000"
X= "1100011011000110011011000011100000111000011011001100011000000000"
Y= "1100110011001100110011000111100000110000001100000111100000000000"
Z= "1111111011000110100011000001100000110010011001101111111000000000"
bracketleft= "0111100001100000011000000110000001100000011000000111100000000000"
backslash= "1100000001100000001100000001100000001100000001100000001000000000"
bracketright= "0111100000011000000110000001100000011000000110000111100000000000"
asciicircum= "0001000000111000011011001100011000000000000000000000000000000000"
underscore= "0000000000000000000000000000000000000000000000000000000011111111"
grave= "0011000000110000000110000000000000000000000000000000000000000000"
a= "0000000000000000011110000000110001111100110011000111011000000000"
b= "1110000001100000011000000111110001100110011001101101110000000000"
c= "0000000000000000011110001100110011000000110011000111100000000000"
d= "0001110000001100000011000111110011001100110011000111011000000000"
e= "0000000000000000011110001100110011111100110000000111100000000000"
f= "0011100001101100011000001111000001100000011000001111000000000000"
g= "0000000000000000011101101100110011001100011111000000110011111000"
h= "1110000001100000011011000111011001100110011001101110011000000000"
i= "0011000000000000011100000011000000110000001100000111100000000000"
j= "0000110000000000000011000000110000001100110011001100110001111000"
k= "1110000001100000011001100110110001111000011011001110011000000000"
l= "0111000000110000001100000011000000110000001100000111100000000000"
m= "0000000000000000110011001111111011111110110101101100011000000000"
n= "0000000000000000111110001100110011001100110011001100110000000000"
o= "0000000000000000011110001100110011001100110011000111100000000000"
p= "0000000000000000110111000110011001100110011111000110000011110000"
q= "0000000000000000011101101100110011001100011111000000110000011110"
r= "0000000000000000110111000111011001100110011000001111000000000000"
s= "0000000000000000011111001100000001111000000011001111100000000000"
t= "0001000000110000011111000011000000110000001101000001100000000000"
u= "0000000000000000110011001100110011001100110011000111011000000000"
v= "0000000000000000110011001100110011001100011110000011000000000000"
w= "0000000000000000110001101101011011111110111111100110110000000000"
x= "0000000000000000110001100110110000111000011011001100011000000000"
y= "0000000000000000110011001100110011001100011111000000110011111000"
z= "0000000000000000111111001001100000110000011001001111110000000000"
braceleft= "0001110000110000001100001110000000110000001100000001110000000000"
bar= "0001100000011000000110000000000000011000000110000001100000000000"
braceright= "1110000000110000001100000001110000110000001100001110000000000000"
space="0000000000000000000000000000000000000000000000000000000000000000"
strip.clear_strip()

def lightUp(LED,Letter):
    for x in range (0,8,2):
        strN = x
        for y in range(x*8, (x*8) + 8):
            if (Letter[strN] == '1'):
                strip.set_pixel_rgb(y+LED,0x202030)
            strN += 8
    for x in range (1,8,2):
        strN = 56 + x
        for y in range(x*8, (x*8) + 8):
            if (Letter[strN] == '1'):
                strip.set_pixel_rgb(y+LED,0x202030)
            strN -= 8

def morrly():            
    file = "/home/pi/Desktop/ledFolder/SampleText.txt"
    f = open(file, "w")
    url = "https://twitter.com/PohsSci"
    html = urlopen(url)
    soup = BeautifulSoup(html, "html.parser")
    
    # Gets the tweet
    tweets = soup.find_all("li", attrs = {"class":"js-stream-item"})
        
    # Writes tweet fetched in file
    for tweet in tweets:
        try:
            if tweet.find('p',{'tweet-text'}):
                tweet_text = tweet.find('p',{'tweet-text'}).text.encode('utf8').strip()
                str_tweet = tweet_text.decode('utf-8')
                # Tweet is split to delete common types of URL
                only_tweet = re.sub(r'''(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))''', " ", str_tweet)
    
                f.write(str_tweet)
                #f.write('\n')         
        except: AttributeError
    f.close()
    
    infile = open(r"/home/pi/Desktop/ledFolder/SampleText.txt", 'r')
    #spl_word="p;;"
    firstLine = "   "
    firstLine = firstLine + infile.readline()
    #Tweet is split to delete HTTP URL
    firstLine = firstLine + "    "
    noHttp = firstLine.split('http', 2)[0]
    #cleanText = noHttp.partition(spl_word)[2]
    
    #print(cleanText)
    infile.close()
    
    infile = open("/home/pi/Desktop/ledFolder/SampleText.txt", "w")
    infile.write(noHttp)
    infile.close()
    

    #file1 = open(r"/home/pi/Desktop/ledFolder/SampleText.txt","r") #make a file variable, the second r means read. not sure abt first r
    #fromTxt = file1.readline() #use function of file objects and read 1 individual line
    #file1.close() #close out file (does this save memory?)
  
    
    fromTxt = split(noHttp)#use our split function to make an array of characters
    #print(fromTxt)
    fromTxt = [(toBinary(char)) for char in fromTxt]
    return fromTxt
    #print(fromTxt)
    '''
    with open("/home/pi/Desktop/ledFolder/SampleText.txt") as f_input:
        finalfile = f_input.read().rstrip('\n')
    
    with open("/home/pi/Desktop/ledFolder/SampleText.txt", 'w') as f_output:    
        f_output.write(finalfile)
    f.close()
    '''
fromTxt = morrly()

count = 0

trueCount = 299
temp = 0

while True:
 
    trueCount+=1
    strip.clear_strip()
    startLed = 64*count
    for word in fromTxt:
        temp += 1
        lightUp(startLed,word)
        startLed += 64
    if (startLed > 256):
        count += -1
       
    if(startLed < 320):
        count = 0
    strip.show()
    time.sleep(1)
    print(trueCount)
    if(trueCount == 300):
        fromTxt = morrly()
        trueCount = 0
